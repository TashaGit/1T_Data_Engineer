DROP TABLE IF EXISTS cities CASCADE;
CREATE TABLE IF NOT EXISTS cities (
    city_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    city_name VARCHAR(255),
    CONSTRAINT city_pkey PRIMARY KEY (city_id)
   );

DROP TABLE IF EXISTS states CASCADE;
CREATE TABLE states (
    state_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    state_name VARCHAR(255),
    CONSTRAINT state_pkey PRIMARY KEY (state_id)
   );

DROP TABLE IF EXISTS countries CASCADE;
CREATE TABLE countries (
    country_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    country_name VARCHAR(255),
    CONSTRAINT country_pkey PRIMARY KEY (country_id)
   );

DROP TABLE IF EXISTS regions CASCADE;
CREATE TABLE regions (
    region_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    region_name VARCHAR(255),
    CONSTRAINT region_pkey PRIMARY KEY (region_id)
   );

DROP TABLE IF EXISTS categories CASCADE;
CREATE TABLE categories (
    category_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    category_name VARCHAR(255),
    CONSTRAINT category_pkey PRIMARY KEY (category_id)
   );

DROP TABLE IF EXISTS sub_categories CASCADE;
CREATE TABLE sub_categories (
    sub_category_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    sub_category_name VARCHAR(255),
    CONSTRAINT sub_category_pkey PRIMARY KEY (sub_category_id)
   );

DROP TABLE IF EXISTS ship_modes CASCADE;
CREATE TABLE ship_modes (
    ship_mode_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    ship_mode_name VARCHAR(255),
    CONSTRAINT ship_mode_pkey PRIMARY KEY (ship_mode_id)
   );

DROP TABLE IF EXISTS postal_codes CASCADE;
CREATE TABLE postal_codes (
    postal_code_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    postal_code_value VARCHAR(255),
    CONSTRAINT postal_code_pkey PRIMARY KEY (postal_code_id)
   );

DROP TABLE IF EXISTS products CASCADE;
CREATE TABLE products (
    product_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    product_id_raw VARCHAR(255),
    product_name VARCHAR(255),
    category_id INT,
    sub_category_id INT,
    CONSTRAINT product_pkey PRIMARY KEY (product_id),
    CONSTRAINT category_id FOREIGN KEY (category_id)
        REFERENCES categories (category_id) MATCH SIMPLE,
    CONSTRAINT sub_category_id FOREIGN KEY (sub_category_id)
        REFERENCES sub_categories (sub_category_id) MATCH SIMPLE
   );

DROP TABLE IF EXISTS customers CASCADE;
CREATE TABLE customers (
    customer_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    customer_id_raw VARCHAR(255),
    customer_name VARCHAR(255),
    CONSTRAINT customer_pkey PRIMARY KEY (customer_id));

DROP TABLE IF EXISTS orders CASCADE;
CREATE TABLE orders (
    row_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 ),
    order_id VARCHAR(255),
    order_date DATE,
    ship_date DATE,
    ship_mode_id INT,
    customer_id INT,
    segment VARCHAR(255),
    country_id INT,
    city_id INT,
    state_id INT,
    postal_code_id INT,
    region_id INT,
    product_id INT,
    sales NUMERIC,
    quantity INT,
    discount NUMERIC,
    profit NUMERIC,
    CONSTRAINT row_pkey PRIMARY KEY (row_id),
    CONSTRAINT ship_mode_id FOREIGN KEY (ship_mode_id)
        REFERENCES ship_modes (ship_mode_id) MATCH SIMPLE,
    CONSTRAINT customer_id FOREIGN KEY (customer_id)
        REFERENCES customers (customer_id) MATCH SIMPLE,
    CONSTRAINT country_id FOREIGN KEY (country_id)
        REFERENCES countries (country_id) MATCH SIMPLE,
    CONSTRAINT city_id FOREIGN KEY (city_id)
        REFERENCES cities (city_id) MATCH SIMPLE,
    CONSTRAINT state_id FOREIGN KEY (state_id)
        REFERENCES states (state_id) MATCH SIMPLE,
    CONSTRAINT postal_code_id FOREIGN KEY (postal_code_id)
        REFERENCES postal_codes (postal_code_id) MATCH SIMPLE,
    CONSTRAINT region_id FOREIGN KEY (region_id)
        REFERENCES regions (region_id) MATCH SIMPLE,
    CONSTRAINT product_id FOREIGN KEY (product_id)
        REFERENCES products (product_id) MATCH SIMPLE
    );